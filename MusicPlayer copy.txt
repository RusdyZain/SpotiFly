import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.*;
import javax.swing.plaf.basic.BasicSliderUI;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Random;

public class MusicPlayer extends JFrame implements ActionListener {

	private JLabel muteLabel;
	private JLabel soundLabel;
	private JLabel currentSongLabel;
	private JLabel currentTimeLabel;
	private JLabel totalTimeLabel;

	private JPanel buttonPanel;
	private JPanel currentSongPanel;

	private JButton chooseFileButton;
	private JButton shuffleButton;
	private JButton previousButton;
	private JButton playButton;
	private JButton nextButton;
	private JButton loopButton;

	private ImageIcon shuffleIcon;
	private ImageIcon previousIcon;
	private ImageIcon playIcon;
	private ImageIcon pauseIcon;
	private ImageIcon nextIcon;
	private ImageIcon loopIcon;
	private ImageIcon unloopIcon;
	private ImageIcon unShuffleIcon;

	private JSlider volumeSlider;
	private JTextArea playlistArea;
	private JProgressBar progressBar;
	private JPanel borderProgressBar;

	private JFileChooser fileChooser;
	private ArrayList<File> songFileList;
	private JList<String> songList;
	private AudioPlayer audioPlayer;
	private boolean isPaused;
	private boolean isLooping;
	private boolean isShuffle;

	private int songFilePos;
	private int numSongs;
	private int currentlyPlayingIndex = -1;
	private ImageIcon originalImageIcon;
	private Image scaledImage;
	private JLabel imageLabel;

	public MusicPlayer() {

		super("SportiFly");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setLayout(null);

		chooseFileButton = new JButton("Add Song");
		shuffleButton = new JButton();
		previousButton = new JButton();
		playButton = new JButton();
		nextButton = new JButton();
		loopButton = new JButton();

		chooseFileButton.addActionListener(this);
		shuffleButton.addActionListener(this);
		previousButton.addActionListener(this);
		playButton.addActionListener(this);
		nextButton.addActionListener(this);
		loopButton.addActionListener(this);
		audioPlayer = new AudioPlayer();

		ImageIcon fileIcon = new ImageIcon("pngs/add.png");
		chooseFileButton = new JButton(fileIcon);
		chooseFileButton.addActionListener(this);
		chooseFileButton.setBounds(420, 25, 30, 30);
		chooseFileButton.setBackground(new Color(0x191414));
		add(chooseFileButton);

		shuffleIcon = new ImageIcon("pngs/shuffle.png");
		previousIcon = new ImageIcon("pngs/previous.png");
		playIcon = new ImageIcon("pngs/play.png");
		pauseIcon = new ImageIcon("pngs/pause.png");
		nextIcon = new ImageIcon("pngs/next.png");
		loopIcon = new ImageIcon("pngs/loop.png");
		unloopIcon = new ImageIcon("pngs/unloop.png");
		unShuffleIcon = new ImageIcon("pngs/unshuffle.png");

		shuffleButton.setIcon(shuffleIcon);
		previousButton.setIcon(previousIcon);
		playButton.setIcon(playIcon);
		nextButton.setIcon(nextIcon);
		loopButton.setIcon(loopIcon);

		shuffleButton.setContentAreaFilled(false);
		previousButton.setContentAreaFilled(false);
		playButton.setContentAreaFilled(false);
		nextButton.setContentAreaFilled(false);
		loopButton.setContentAreaFilled(false);

		shuffleButton.setBorderPainted(false);
		previousButton.setBorderPainted(false);
		playButton.setBorderPainted(false);
		nextButton.setBorderPainted(false);
		loopButton.setBorderPainted(false);

		buttonPanel = new JPanel();
		buttonPanel.setBounds(-10, 720, 500, 80);
		buttonPanel.setBackground(new Color(0x191414));

		buttonPanel.add(shuffleButton);
		buttonPanel.add(previousButton);
		buttonPanel.add(playButton);
		buttonPanel.add(nextButton);
		buttonPanel.add(loopButton);

		add(buttonPanel);

		muteLabel = new JLabel(new ImageIcon("pngs/mute.png"));
		muteLabel.setBounds(280, 17, 15, 745);
		add(muteLabel);

		soundLabel = new JLabel(new ImageIcon("pngs/sound.png"));
		soundLabel.setBounds(430, 17, 15, 745);
		add(soundLabel);

		ImageIcon thumbImageIcon = new ImageIcon("pngs/dragVolume.png");
		Icon thumbIcon = new ThumbIcon(thumbImageIcon);
		volumeSlider = new JSlider(JSlider.HORIZONTAL, 0, 200, 0);
		volumeSlider.setBounds(300, 380, 120, 20);
		volumeSlider.setValue(70);
		volumeSlider.setOpaque(false);
		volumeSlider.setUI(new BasicSliderUI(volumeSlider) {
			@Override
			public void paintThumb(Graphics g) {
				thumbIcon.paintIcon(volumeSlider, g, thumbRect.x, thumbRect.y);
			}
		});

		add(volumeSlider);

		setSize(50, 50);

		playlistArea = new JTextArea(10, 40);
		playlistArea.setEditable(false);
		playlistArea.setFont(new Font("", Font.BOLD, 15));
		playlistArea.setBackground(new Color(0x191414));
		playlistArea.setForeground(new Color(0x1DB954));
		playlistArea.setBorder(BorderFactory.createLineBorder(new Color(0x1DB954)));
		playlistArea.append("\n");

		songList = new JList<>();
		songList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		songList.setForeground(new Color(0x1DB954));
		songList.setBackground(new Color(0x191414));
		songList.setFont(new Font("", Font.BOLD, 15));

		songList.addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				if (!e.getValueIsAdjusting()) {
					int selectedIdx = songList.getSelectedIndex();
					if (selectedIdx != -1) {
						audioPlayer.stop();
						songFilePos = selectedIdx;
						loadAndPlayNewSong();
						updateSelectedSongAppearance(selectedIdx);
					}
				}
			}
		});

		originalImageIcon = new ImageIcon("Music/One Direction 18.jpeg");

		int originalWidth = originalImageIcon.getIconWidth();
		int originalHeight = originalImageIcon.getIconHeight();

		int scaledWidth = originalWidth / 2;
		int scaledHeight = originalHeight / 2;

		scaledImage = originalImageIcon.getImage().getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);

		imageLabel = new JLabel(new ImageIcon(scaledImage));
		imageLabel.setBounds(140, 400, scaledWidth, scaledHeight);
		add(imageLabel);

		JScrollPane listScrollPane = new JScrollPane(songList);
		listScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
		listScrollPane.setBounds(50, 70, 400, 304);
		add(listScrollPane);

		currentSongPanel = new JPanel();
		currentSongPanel.setBounds(70, 655, 350, 30);
		currentSongPanel.setLayout(new FlowLayout());
		currentSongPanel.setOpaque(false);
		currentSongPanel.setForeground(new Color(0x1DB954));
		currentSongLabel = new JLabel("");
		currentSongPanel.add(currentSongLabel);
		add(currentSongPanel);

		borderProgressBar = new JPanel();
		borderProgressBar.setBounds(70, 698, 350, 5);
		borderProgressBar.setBorder(BorderFactory.createLineBorder(Color.WHITE));
		borderProgressBar.setBackground(new Color(0x191414));
		add(borderProgressBar);

		progressBar = new JProgressBar();
		progressBar.setBounds(70, 698, 350, 5);
		progressBar.setForeground(Color.WHITE);
		progressBar.setBackground(new Color(0x191414));

		add(progressBar);

		currentTimeLabel = new JLabel();
		currentTimeLabel.setBounds(20, 690, 50, 20);
		currentTimeLabel.setText("0:00");
		add(currentTimeLabel);

		totalTimeLabel = new JLabel();
		totalTimeLabel.setBounds(440, 690, 50, 20);
		totalTimeLabel.setText("0:00");
		add(totalTimeLabel);

		songFileList = new ArrayList<>();
		fileChooser = new JFileChooser(".");
		fileChooser.setFileFilter(new FileNameExtensionFilter("WAV Files", "wav"));
		fileChooser.setApproveButtonText("Choose");

		new VolumeControl(volumeSlider, audioPlayer);

		getContentPane().setBackground(new Color(0x191414));
		setSize(500, 890);
		setLocationRelativeTo(null);
		setResizable(false);
		setVisible(true);

		File firstSong = new File("Music/AnneMarie James Arthur Rewrite The Stars.wav");
		songFileList.add(firstSong);
		numSongs = songFileList.size();
		songFileList.add(new File("Music/Locked Out Of Heaven Bruno Mars.wav"));
		numSongs = songFileList.size();
		songFileList.add(new File("Music/One Direction 18.wav"));
		numSongs = songFileList.size();
		songFileList.add(new File("Music/Taylor Swift Blank Space.wav"));
		numSongs = songFileList.size();
		displaySongInPlaylist();

		try {
			audioPlayer.load(firstSong.getPath());
		} catch (Exception e) {
			e.printStackTrace();
		}

		updateSelectedSongAppearance(songFilePos);
	}

	public void actionPerformed(ActionEvent event) {
		System.out.println("Action Performed: " + event.getActionCommand());
		if (event.getSource() == chooseFileButton) {
			chooseFile();
		}

		if (event.getSource() == playButton) {
			togglePlay(0);
		}
		if (event.getSource() == previousButton) {
			previous();
		}
		if (event.getSource() == nextButton) {
			next();
		}
		if (event.getSource() == loopButton) {
			toggleLoop();
		}
		if (event.getSource() == shuffleButton) {
			shuffle();
		}
	}

	private void updateSelectedSongAppearance(int selectedIdx) {
		DefaultListCellRenderer renderer = new DefaultListCellRenderer();
		renderer.setBackground(new Color(0x191414));
		renderer.setForeground(Color.WHITE);

		songList.setCellRenderer((list, value, index, isSelected, cellHasFocus) -> {
			Component c = renderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
			if (isSelected) {
				c.setBackground(Color.BLACK);
				c.setForeground(Color.WHITE);
			} else {
				c.setBackground(new Color(0x191414));
				c.setForeground(new Color(0x1DB954));
			}
			return c;
		});
	}

	private void chooseFile() {
		int result = fileChooser.showOpenDialog(this);
		if (result == JFileChooser.APPROVE_OPTION) {
			try {
				if (audioPlayer.isRunning()) {
					audioPlayer.stop();
					isPaused = true;
					playButton.setIcon(playIcon);
				}

				File selectedFile = fileChooser.getSelectedFile();
				audioPlayer.load(selectedFile.getPath());
				songFileList.add(selectedFile);
				numSongs++;
				displaySongInPlaylist();
				displayCurrentSong();
				displayProgress();

				updateSelectedSongAppearance(songFilePos);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void togglePlay(int i) {
		System.out.println("Toggle Play: " + i);
		if (audioPlayer != null && audioPlayer.getClip() != null) {
			if (audioPlayer.isRunning()) {
				audioPlayer.stop();
				isPaused = true;
				playButton.setIcon(playIcon);
			} else {
				if (!isPaused) {
					if (audioPlayer.getClip() != null) {
						if (isShuffle) {
							songFilePos = i;
						}
						loadAndPlayNewSong();
						startTimer();
						playButton.setIcon(pauseIcon);
						currentlyPlayingIndex = i;
						isPaused = false;
					}
				} else {
					audioPlayer.resume();
					playButton.setIcon(pauseIcon);
				}
			}

			if (!isPaused) {
				updateSelectedSongAppearance(i);
			} else {
				i = currentlyPlayingIndex;
			}

			System.out.println("Last Valid Position: " + audioPlayer.getLastValidPosition());
			System.out.println("Is Paused: " + isPaused);
		}
	}

	private void next() {
		audioPlayer.stop();
		if (!isShuffle) {
			playRandomSong();
		} else {
			playNextSong();
		}
	}

	private void playNextSong() {
		songFilePos++;
		if (songFilePos == numSongs) {
			songFilePos = 0;
		}
		loadAndPlayNewSong();

		if (isLooping) {
			audioPlayer.playFromPosition(0);
		}

		songList.setSelectedIndex(songFilePos);
		songList.ensureIndexIsVisible(songFilePos);
		System.out.println("Next Song: " + songFileList.get(songFilePos).getName());
	}

	private void playRandomSong() {
		Random rand = new Random();
		int randomIndex;
		do {
			randomIndex = rand.nextInt(numSongs);
		} while (randomIndex == songFilePos);
		songFilePos = randomIndex;
		loadAndPlayNewSong();

		if (isLooping) {
			audioPlayer.playFromPosition(0);
		}

		songList.setSelectedIndex(songFilePos);
		songList.ensureIndexIsVisible(songFilePos);
		System.out.println("Next Song: " + songFileList.get(songFilePos).getName());
	}

	private void previous() {
		audioPlayer.stop();
		if (!isShuffle) {
			playRandomPreviousSong();
		} else {
			playPreviousSong();
		}
	}

	private void playPreviousSong() {
		songFilePos--;
		if (songFilePos < 0) {
			songFilePos = numSongs - 1;
		}
		loadAndPlayNewSong();

		if (isLooping) {
			audioPlayer.playFromPosition(0);
		}

		songList.setSelectedIndex(songFilePos);
		songList.ensureIndexIsVisible(songFilePos);
		System.out.println("Previous Song: " + songFileList.get(songFilePos).getName());
	}

	private void playRandomPreviousSong() {
		Random rand = new Random();
		int randomIndex;
		do {
			randomIndex = rand.nextInt(numSongs);
		} while (randomIndex == songFilePos);
		songFilePos = randomIndex;
		loadAndPlayNewSong();

		if (isLooping) {
			audioPlayer.playFromPosition(0);
		}

		songList.setSelectedIndex(songFilePos);
		songList.ensureIndexIsVisible(songFilePos);
		System.out.println("Previous Song: " + songFileList.get(songFilePos).getName());
	}

	private void toggleLoop() {
		isLooping = !isLooping;
		audioPlayer.setLoop(isLooping);
		loopButton.setIcon(isLooping ? unloopIcon : loopIcon);

		System.out.println("Looping: " + isLooping);
	}

	private void shuffle() {
		isShuffle = !isShuffle;
		audioPlayer.stop();
		Random rand = new Random();
		shuffleButton.setIcon(isShuffle ? unShuffleIcon : shuffleIcon);
		songFilePos = rand.nextInt(numSongs);
		currentlyPlayingIndex = songFilePos;
		loadAndPlayNewSong();

		System.out.println("Shuffle: " + isShuffle);
		System.out.println("Shuffled Song: " + songFileList.get(songFilePos).getName());
	}

	private void loadAndPlayNewSong() {
		try {
			long position = 0;
			if (!isShuffle) {
				position = 0;
			}
			audioPlayer.load(songFileList.get(songFilePos).getPath());
			audioPlayer.playFromPosition(position);
			isPaused = false;
			playButton.setIcon(pauseIcon);
			displayCurrentSong();
			updateSelectedSongAppearance(songFilePos);

			displayProgress();
			startTimer();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void startTimer() {
		progressBar.setMaximum((int) audioPlayer.getClip().getMicrosecondLength());
		progressBar.setValue((int) audioPlayer.getClip().getMicrosecondPosition());

		totalTimeLabel.setText(String.format("%d:%02d",
				audioPlayer.getClip().getMicrosecondLength() / 1000000 / 60,
				audioPlayer.getClip().getMicrosecondLength() / 1000000 % 60));

		java.util.Timer timer = new java.util.Timer();
		TimerTaskRunner task = new TimerTaskRunner(() -> {
			progressBar.setValue((int) audioPlayer.getClip().getMicrosecondPosition());
			currentTimeLabel.setText(String.format("%d:%02d",
					audioPlayer.getClip().getMicrosecondPosition() / 1000000 / 60,
					audioPlayer.getClip().getMicrosecondPosition() / 1000000 % 60));
		});
		timer.scheduleAtFixedRate(task, 0, 1000);
	}

	private void displaySongInPlaylist() {
		String[] songNames = new String[songFileList.size()];
		for (int i = 0; i < songFileList.size(); i++) {
			songNames[i] = "    " + (i + 1) + ". " + songFileList.get(i).getName().substring(0,
					songFileList.get(i).getName().length() - 4);
		}

		songList.setListData(songNames);
	}

	private void displayCurrentSong() {
		currentSongLabel.setText(songFileList.get(songFilePos).getName().substring(0,
				songFileList.get(songFilePos).getName().length() - 4));
	}

	private void displayProgress() {
		progressBar.setMaximum((int) audioPlayer.getClip().getMicrosecondLength());
		progressBar.setValue((int) audioPlayer.getClip().getMicrosecondPosition());

		totalTimeLabel.setText(String.format("%d:%02d",
				audioPlayer.getClip().getMicrosecondLength() / 1000000 / 60,
				audioPlayer.getClip().getMicrosecondLength() / 1000000 % 60));

		java.util.Timer timer = new java.util.Timer();
		TimerTaskRunner task = new TimerTaskRunner(() -> {
			progressBar.setValue((int) audioPlayer.getClip().getMicrosecondPosition());
			currentTimeLabel.setText(String.format("%d:%02d",
					audioPlayer.getClip().getMicrosecondPosition() / 1000000 / 60,
					audioPlayer.getClip().getMicrosecondPosition() / 1000000 % 60));
		});
		timer.scheduleAtFixedRate(task, 0, 1000);

		if (timer != null) {
			timer.cancel();
			timer = null;
		}
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(() -> new MusicPlayer());
	}
}